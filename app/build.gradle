import java.util.zip.ZipEntry

apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        applicationId "com.wq.freeze.gradledemo2"
        minSdkVersion 10
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.1.1'
}

android.applicationVariants.all { variant ->
    variant.assemble.doLast {
        releaseApk(variant)
    }
}

def releaseApk(targetVariant) {

    def file = new File(project.getBuildDir().getAbsolutePath() + File.separator + "outputs" + File.separator + "apk" + File.separator + "app-release-unsigned.apk")
    if (file.exists()) {
        System.out.println(project.getRootDir().getAbsolutePath() + "__1")   //工程根目录
        System.out.println(project.getBuildDir().getAbsolutePath() + "__2")  //工程根目录/app/build
        System.out.println(project.getBuildFile().getAbsolutePath() + "__3")  //工程根目录/app/build/build.gradle
        System.out.println(project.getPath() + "__4")   //  :app
        System.out.println(project.getProjectDir().getAbsolutePath() + "__5")  //工程根目录/app

        def releaseDir = new File(project.getRootDir(), "/release_dir");
        if (releaseDir.exists() && releaseDir.isDirectory()) {
            for (File f: releaseDir.listFiles()) {
                f.delete()
            }
        } else {
            releaseDir.mkdir()
        }

        copy {
            from 'build/outputs/apk/app-release-unsigned.apk'
            into releaseDir.getAbsolutePath()
        }
        generateChannelPackage(new File(releaseDir, 'app-release-unsigned.apk'), releaseDir)
    }
}

def generateChannelPackage(File sourceApk, File dir) {

    def channelPackageDir = new File(dir, "/channels_package")

    if (channelPackageDir.exists() && channelPackageDir.isDirectory()) {
        for (File f: channelPackageDir.listFiles()) {
            f.delete()
        }
    } else {
        channelPackageDir.mkdir()
    }

    def channels = "im_001,im_002,im_003,im_004,im_005".split(",")
    for(String channel: channels) {
        copy {
            from sourceApk.getAbsolutePath()
            into channelPackageDir.getAbsolutePath()
            rename (sourceApk.getName(), channel + ".apk")
        }


    }
}
