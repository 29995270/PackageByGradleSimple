
apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        applicationId "com.wq.freeze.gradledemo2"
        minSdkVersion 10
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"

        buildConfigField "boolean", "ENABLE_DEBUG", "false"
    }


    signingConfigs {
        debug {

        }
        release {
            storeFile file("./mykeystore.jks")
            storePassword "123456"
            keyAlias "freeze"
            keyPassword "123456"
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {

        im_100 {
            manifest.srcFile 'src/main/AndroidManifest.xml'
        }
        im_200 {
            manifest.srcFile 'src/main/AndroidManifest002.xml'
        }
    }

    productFlavors {
        im_100 {
//            manifestPlaceholders = [CHANNEL_NAME: "1000"]
//            manifestPlaceholders = [IC_NAME: "@drawable/ic_launcher"]  //不要分条目写，会被覆盖，用下面类似kotlin的方式
        }
        im_200 {
            manifestPlaceholders = [CHANNEL_NAME: "1000", IC_NAME: "@drawable/ic_launcher"]
            buildConfigField "boolean", "ENABLE_DEBUG", "false"
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.1.1'
}

android.applicationVariants.all { variant ->

    //在merge文件之前进行一些操作，比如修改名字，替换什么的
    def xhdpiDir = new File(project.getProjectDir().getAbsolutePath() + File.separator + "src" + File.separator + "main" + File.separator + "res" + File.separator + "drawable-xhdpi")
    variant.mergeResources.doFirst {

//        if (variant.buildType.name.equals('release') && variant.productFlavors.get(0).getName().equals("kanjiantv_xiaomi")) {
//            def xiaomiIc = new File(xhdpiDir, "ic_launcher_xiaomi.png")
//            xiaomiIc.renameTo(new File(xhdpiDir, "ic_launcher.png"))
//        } else if(variant.buildType.name.equals('release') && !variant.productFlavors.get(0).getName().equals("kanjiantv_xiaomi")) {
//            def xiaomiIc = new File(xhdpiDir, "ic_launcher.png")
//            if (xiaomiIc.exists()) {
//                xiaomiIc.renameTo(new File(xhdpiDir, "ic_launcher_xiaomi.png"))
//            }
//        }
    }

    variant.assemble.doLast {
        releaseApk(variant)

    }
}

def releaseApk(targetVariant) {

    System.out.println(targetVariant.buildType.name) //release debug
    System.out.println(targetVariant.name)   //im_100Release im_100Debug im_200Release ....
    System.out.println(targetVariant.productFlavors.get(0).getName())  //im_100 im_200

    if (!targetVariant.buildType.name.equals('release') || !targetVariant.productFlavors.get(0).getName().equals("im_100")) return

    // apk name like this : projectName-productFlavorName-buildTypeName.apk
    def file = new File(project.getBuildDir().getAbsolutePath() + File.separator + "outputs" + File.separator + "apk" + File.separator + "app-im_100-release.apk")
    System.out.println("_________________________")
    if (file.exists()) {
//        System.out.println(project.getRootDir().getAbsolutePath() + "__1")   //工程根目录
//        System.out.println(project.getBuildDir().getAbsolutePath() + "__2")  //工程根目录/app/build
//        System.out.println(project.getBuildFile().getAbsolutePath() + "__3")  //工程根目录/app/build/build.gradle
//        System.out.println(project.getPath() + "__4")   //  :app
//        System.out.println(project.getProjectDir().getAbsolutePath() + "__5")  //工程根目录/app

        def releaseDir = new File(project.getRootDir(), "/release_dir");
        if (releaseDir.exists() && releaseDir.isDirectory()) {
            delete(releaseDir)
        } else {
            releaseDir.mkdir()
        }

        copy {
            from file
            into releaseDir.getAbsolutePath()
        }

        generateChannelPackage(new File(releaseDir, 'app-im_100-release.apk'), releaseDir)

//        def channelPackageDir = new File(releaseDir, "/channels_package")
//        for (File f: channelPackageDir.listFiles()) {
//            targetVariant.createZipAlignTask("align" + f.getName(), f, f).zipAlign() //has deprecated
//        }
    }
}

def generateChannelPackage(File sourceApk, File dir) {

    def channelPackageDir = new File(dir, "/channels_package")

    if (channelPackageDir.exists() && channelPackageDir.isDirectory()) {
        delete(channelPackageDir)
    } else {
        channelPackageDir.mkdir()
    }

    def channels = "im_001,im_002,im_003,im_004,im_005".split(",")
    for(String channel: channels) {
        copy {
            from sourceApk.getAbsolutePath()
            into channelPackageDir.getAbsolutePath()
            rename (sourceApk.getName(), channel + ".apk")
        }


        def temp = new File(channelPackageDir, "/temp")
        if (!temp.exists()) {
            temp.mkdir()
        } else {
            delete(temp)
        }

        copy {
            from zipTree(new File(channelPackageDir, channel + ".apk"))
            into temp
        }

        def channelFile = new File(temp.getAbsolutePath() + File.separator + "META-INF", channel)
        channelFile.createNewFile()

        tasks.create(name: 'zip' + channel, type: Zip) {
            from temp
            baseName = channel
        }.execute()

        delete(temp)
        delete(new File(channelPackageDir, channel + ".apk"))

        copy {
            from project.getBuildDir().getAbsolutePath() + File.separator + "distributions" + File.separator + channel + ".zip"
            into channelPackageDir.getAbsolutePath()
            rename (channel + ".zip", channel + "_channeled.apk")
        }
    }
}
